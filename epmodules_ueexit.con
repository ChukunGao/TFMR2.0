function data()
    return {
        type = "STREET_CONSTRUCTION",
        description = {
            name = _("TFMR modules Urban Expwy Exit"),
            description = _(" "),
        },
        availability = {
            yearFrom = 1920,
            yearTo = 9999
        },
        skipCollision = true,
        params = {
            {key = "eproads_groundlane1", name = "Ground Lanes 1", values = {_("1 lane"), _("2 lane"), _("3 lane"), _("4 lane")}, },
            {key = "eproads_groundlane2", name = "Ground Lanes 2", values = {_("1 lane"), _("2 lane"), _("3 lane"), _("4 lane")}, },
            {key = "eproads_elevatedlane1", name = "Elevated Lanes 1", values = {_("1 lane"), _("2 lane"), _("3 lane"), _("4 lane")}, },
            {key = "eproads_elevatedlane2", name = "Elevated Lanes 2", values = {_("1 lane"), _("2 lane"), _("3 lane"), _("4 lane")}, },
            {key = "eproads_height", name = "Elevated Road Height",uiType = "SLIDER", values = {_("12"), _("14"), _("16"), _("18"), _("20"), _("22"), _("24")}, },
            {key = "eproads_configure", name = "Module Configuration", values = {_("Right"), _("Left")}, },
            {key = "eproads_ramp", name = "Ramp", values = {_("Exit"), _("Entry"), _("Both")}, },
            {key = "eproads_twoside", name = "Two Sides", values = {_("Yes"), _("No")}, },
            {key = "eproads_length", name = "Length Scaling", uiType = "SLIDER", values = {_("1"), _("1.1"), _("1.2"), _("1.3"), _("1.4"), _("1.5"), _("1.6"), _("1.7"), _("1.8"), _("1.9"), _("2")}, },
            {key = "eproads_end1pillar", name = "Pillar at first end", uiType = "CHECKBOX", values = {_("0"), _("1")}, },
            {key = "eproads_end2pillar", name = "Pillar at second end", uiType = "CHECKBOX", values = {_("0"), _("1")}, },
            {key = "eproads_pillarcount", name = "Number of pillars in the middle", values = {_("0"), _("1"), _("2"), _("3")}, },
        },
        updateFn = function(params)
            local result = { }
            local roadListcr, roadListue, leftModuleListcr, leftModuleListhw, xflip, laneChoiceGround1, laneChoiceGround2, laneChoiceElevated1, laneChoiceElevated2, groundFaceName, roadName, groundModuleList, elevatedModuleList, railingElevated, moduleCentre, h, side, x, xdisplace, pillarName, len, n, d
    
            result.edgeLists = { }
            result.models = { }
            result.groundFaces = { }

            roadListcr = {"eproads/1_lane_oneway_cr.lua", "eproads/2_lane_oneway_cr.lua", "eproads/3_lane_oneway_cr.lua", "eproads/4_lane_oneway_cr.lua"}
            roadListue = {"eproads/1_lane_oneway_ue.lua", "eproads/2_lane_oneway_ue.lua", "eproads/3_lane_oneway_ue.lua", "eproads/4_lane_oneway_ue.lua"}
            leftModuleListcr = {"depot/eproads_0_0_18.mdl", "depot/eproads_1_0_18.mdl", "depot/eproads_2_0_18.mdl", "depot/eproads_3_0_18.mdl"}
            leftModuleListhw = {"depot/eproads_0_0_18_hw.mdl", "depot/eproads_1_0_18_hw.mdl", "depot/eproads_2_0_18_hw.mdl", "depot/eproads_3_0_18_hw.mdl"}

            if params.eproads_configure == 0 then
                xflip = 1
            elseif params.eproads_configure == 1 then
                xflip = -1
            end

            laneChoiceGround1 = params.eproads_groundlane1 + 1
            laneChoiceGround2 = params.eproads_groundlane2 + 1
            laneChoiceElevated1 = params.eproads_elevatedlane1 + 1
            laneChoiceElevated2 = params.eproads_elevatedlane2 + 1

            n = 9

            groundFaceName = "headquarter_era_a_01.lua"
            roadName = {roadListcr[laneChoiceGround1], roadListcr[laneChoiceGround2], roadListue[laneChoiceElevated1], roadListue[laneChoiceElevated2]}
            groundModuleList = {leftModuleListcr[laneChoiceGround1], leftModuleListcr[laneChoiceGround2], "depot/eproads_0_6_18.mdl"}
            elevatedModuleList = {leftModuleListhw[laneChoiceElevated1], leftModuleListhw[laneChoiceElevated2], "depot/eproads_0_4.6_18_hw.mdl"}
            railingElevated = {"depot/railing_elevated_0_18_left.mdl", "depot/railing_elevated_4.6_18_right.mdl"}
            moduleCentre = {"depot/centre_6_18.mdl", "depot/centre_4.6_18.mdl"}
            h = params.eproads_height*2+12
            side = {11.6+3.6*laneChoiceGround1, -11.6-3.6*laneChoiceGround2}
            x = {4.8+1.8*laneChoiceGround1, 9+3.6*laneChoiceGround1, -4.8-1.8*laneChoiceGround2, -9-3.6*laneChoiceGround2, 0.5+1.8*laneChoiceElevated1, 3.3+3.6*laneChoiceElevated1, -0.5-1.8*laneChoiceElevated2, -3.3-3.6*laneChoiceElevated2}
            xdisplace = {4.8+3.6*laneChoiceGround1, -4.8-3.6*laneChoiceGround2, 0.5+3.6*laneChoiceElevated1, -0.5-3.6*laneChoiceElevated2}
            if laneChoiceElevated1 <= 2 and laneChoiceElevated2 <= 2 then
                pillarName = "depot/eproads_pillar_thick_module.mdl"
            else
                pillarName = "depot/eproads_pillar_uewide_module.mdl"
            end

            len = 1 + params.eproads_length * 0.1
            n = n*len
            d = h*5*len

            if params.eproads_ramp == 0 or params.eproads_ramp == 2 then
                if laneChoiceElevated1 >= laneChoiceGround1 then
                    result.models[#result.models + 1] = {id = groundModuleList[1], transf = { xflip, 0, 0, 0, 0, -len, 0, 0, 0, 0, 1, 0, xdisplace[1]*xflip, d/2+n, 0, 1 },}
                    result.models[#result.models + 1] = {id = moduleCentre[1], transf = { xflip, 0, 0, 0, 0, -len, 0, 0, 0, 0, 1, 0, xdisplace[1]*xflip, d/2+n, 0, 1 },}
                    result.models[#result.models + 1] = {id = groundModuleList[3], transf = { xflip, 0, 0, 0, 0, -len, 0, 0, 0, 0, 1, 0, xdisplace[1]*xflip, d/2+n, 0, 1 },}
                    result.models[#result.models + 1] = {id = elevatedModuleList[1], transf = { xflip, 0, 0, 0, 0, len, 0, 0, 0, 0, 1, 0, xdisplace[3]*xflip, -d/2-n, h, 1 },}
                    result.models[#result.models + 1] = {id = moduleCentre[2], transf = { xflip, 0, 0, 0, 0, len, 0, 0, 0, 0, 1, 0, xdisplace[3]*xflip, -d/2-n, h, 1 },}
                    result.models[#result.models + 1] = {id = elevatedModuleList[3], transf = { xflip, 0, 0, 0, 0, len, 0, 0, 0, 0, 1, 0, xdisplace[3]*xflip, -d/2-n, h, 1 },}
                    result.models[#result.models + 1] = {id = railingElevated[1], transf = { xflip, 0, 0, 0, 0, len, 0, 0, 0, 0, 1, 0, 0.4*xflip, -d/2-n, h, 1 },}
                    result.models[#result.models + 1] = {id = railingElevated[2], transf = { xflip, 0, 0, 0, 0, len, 0, 0, 0, 0, 1, 0, (0.6+3.6*laneChoiceElevated1)*xflip, -d/2-n, h, 1 },}
                    result.groundFaces[#result.groundFaces + 1] = {face = {{side[1]*xflip, d/2-1}, {0, d/2-1}, {0, d/2+2*n+1}, {side[1]*xflip, d/2+2*n+1}}, modes = {{type = "FILL", key = groundFaceName}}}
                    result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edges = {{{x[1]*xflip, -d/2, 0}, {0, d, 0}}, {{x[1]*xflip, d/2, 0}, {0, d, 0}}, }, snapNodes = {}, freeNodes = {0},}
                    result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edges = {{{x[1]*xflip, d/2+2*n, 0}, {0, 2, 0}}, {{x[1]*xflip, d/2+2*n+2, 0}, {0, 2, 0}}, }, snapNodes = {}, freeNodes = {1},}
                    result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[3], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_no_pillar.lua", edges = {{{x[5]*xflip, -d/2-2*n-2, h}, {0, 2, 0}}, {{x[5]*xflip, -d/2-2*n, h}, {0, 2, 0}}, }, snapNodes = {}, freeNodes = {0},}
                    result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[3], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_no_pillar.lua", edges = {{{x[5]*xflip, -d/2, h}, {0, d, 0}}, {{x[5]*xflip, d/2, h}, {0, d, 0}}, }, snapNodes = {}, freeNodes = {1},}
                    if laneChoiceElevated1 > laneChoiceGround1 then
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = "eproads/1_lane_oneway_ue.lua", }, edgeType = "BRIDGE", edgeTypeName = "epbridge_no_pillar.lua", edges = {{{x[6]*xflip, -d/2, h}, {0, d, 0}}, {{x[2]*xflip, d/2, 0}, {0, d, 0}}, }, snapNodes = {}, freeNodes = {},}
                        result.models[#result.models + 1] = {id = "depot/eproads_pillar_thin_module.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, (x[2]+x[6])/2*xflip, 0, h/2, 1 },}
                    else
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = "eproads/1_lane_oneway_ue.lua", }, edgeType = "BRIDGE", edgeTypeName = "epbridge_no_pillar.lua", edges = {{{x[6]*xflip, -d/2, h}, {0, d/2, 0}}, {{x[2]*xflip, 0, h/2}, {0, d/2, -h/2}}, }, snapNodes = {}, freeNodes = {},}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = "eproads/1_lane_oneway_ue.lua", }, edgeType = "BRIDGE", edgeTypeName = "epbridge_no_pillar.lua", edges = {{{x[2]*xflip, 0, h/2}, {0, d/2, -h/2}}, {{x[2]*xflip, d/2, 0}, {0, d/2, 0}}, }, snapNodes = {}, freeNodes = {},}
                        result.models[#result.models + 1] = {id = "depot/eproads_pillar_thin_module.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x[2]*xflip, 0, h/2, 1 },}
                    end
                    if params.eproads_ramp == 0 and params.eproads_twoside == 0 then
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edges = {{{x[3]*xflip, d/2, 0}, {0, -d, 0}}, {{x[3]*xflip, -d/2, 0}, {0, -d, 0}}, }, snapNodes = {}, freeNodes = {0, 1},}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[4], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_no_pillar.lua", edges = {{{x[7]*xflip, d/2, h}, {0, -d, 0}}, {{x[7]*xflip, -d/2, h}, {0, -d, 0}}, }, snapNodes = {}, freeNodes = {1},}
                    end
                else
                    result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edges = {{{x[1]*xflip, -d/2, 0}, {0, d, 0}}, {{x[1]*xflip, d/2, 0}, {0, d, 0}}, }, snapNodes = {}, freeNodes = {0, 1},}
                    result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[3], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_no_pillar.lua", edges = {{{x[5]*xflip, -d/2, h}, {0, d, 0}}, {{x[5]*xflip, d/2, h}, {0, d, 0}}, }, snapNodes = {}, freeNodes = {0, 1},}
                    result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edges = {{{x[3]*xflip, d/2, 0}, {0, -d, 0}}, {{x[3]*xflip, -d/2, 0}, {0, -d, 0}}, }, snapNodes = {}, freeNodes = {0, 1},}
                    result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[4], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_no_pillar.lua", edges = {{{x[7]*xflip, d/2, h}, {0, -d, 0}}, {{x[7]*xflip, -d/2, h}, {0, -d, 0}}, }, snapNodes = {}, freeNodes = {0, 1},}
                end
            end

            if params.eproads_ramp == 1 or params.eproads_ramp == 2 then
                if laneChoiceElevated1 >= laneChoiceGround1 then
                    result.models[#result.models + 1] = {id = groundModuleList[2], transf = { -xflip, 0, 0, 0, 0, -len, 0, 0, 0, 0, 1, 0, xdisplace[2]*xflip, d/2+n, 0, 1 },}
                    result.models[#result.models + 1] = {id = moduleCentre[1], transf = { -xflip, 0, 0, 0, 0, -len, 0, 0, 0, 0, 1, 0, xdisplace[2]*xflip, d/2+n, 0, 1 },}
                    result.models[#result.models + 1] = {id = groundModuleList[3], transf = { -xflip, 0, 0, 0, 0, -len, 0, 0, 0, 0, 1, 0, xdisplace[2]*xflip, d/2+n, 0, 1 },}
                    result.models[#result.models + 1] = {id = elevatedModuleList[2], transf = { -xflip, 0, 0, 0, 0, len, 0, 0, 0, 0, 1, 0, xdisplace[4]*xflip, -d/2-n, h, 1 },}
                    result.models[#result.models + 1] = {id = moduleCentre[2], transf = { -xflip, 0, 0, 0, 0, len, 0, 0, 0, 0, 1, 0, xdisplace[4]*xflip, -d/2-n, h, 1 },}
                    result.models[#result.models + 1] = {id = elevatedModuleList[3], transf = { -xflip, 0, 0, 0, 0, len, 0, 0, 0, 0, 1, 0, xdisplace[4]*xflip, -d/2-n, h, 1 },}
                    result.models[#result.models + 1] = {id = railingElevated[1], transf = { -xflip, 0, 0, 0, 0, len, 0, 0, 0, 0, 1, 0, -0.4*xflip, -d/2-n, h, 1 },}
                    result.models[#result.models + 1] = {id = railingElevated[2], transf = { -xflip, 0, 0, 0, 0, len, 0, 0, 0, 0, 1, 0, -(0.6+3.6*laneChoiceElevated2)*xflip, -d/2-n, h, 1 },}
                    result.groundFaces[#result.groundFaces + 1] = {face = {{side[2]*xflip, d/2-1}, {0, d/2-1}, {0, d/2+2*n+1}, {side[2]*xflip, d/2+2*n+1}}, modes = {{type = "FILL", key = groundFaceName}}}
                    result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edges = {{{x[3]*xflip, d/2+2*n+2, 0}, {0, -2, 0}}, {{x[3]*xflip, d/2+2*n, 0}, {0, -2, 0}}, }, snapNodes = {}, freeNodes = {0},}
                    result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edges = {{{x[3]*xflip, d/2, 0}, {0, -d, 0}}, {{x[3]*xflip, -d/2, 0}, {0, -d, 0}}, }, snapNodes = {}, freeNodes = {1},}
                    result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[4], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_no_pillar.lua", edges = {{{x[7]*xflip, d/2, h}, {0, -d, 0}}, {{x[7]*xflip, -d/2, h}, {0, -d, 0}}, }, snapNodes = {}, freeNodes = {0},}
                    result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[4], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_no_pillar.lua", edges = {{{x[7]*xflip, -d/2-2*n, h}, {0, -2, 0}}, {{x[7]*xflip, -d/2-2*n-2, h}, {0, -2, 0}}, }, snapNodes = {}, freeNodes = {1},}
                    if laneChoiceElevated2 > laneChoiceGround2 then
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = "eproads/1_lane_oneway_ue.lua", }, edgeType = "BRIDGE", edgeTypeName = "epbridge_no_pillar.lua", edges = {{{x[4]*xflip, d/2, 0}, {0, -d, 0}}, {{x[8]*xflip, -d/2, h}, {0, -d, 0}}, }, snapNodes = {}, freeNodes = {},}
                        result.models[#result.models + 1] = {id = "depot/eproads_pillar_thin_module.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, (x[4]+x[8])/2*xflip, 0, h/2, 1 },}
                    else
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = "eproads/1_lane_oneway_ue.lua", }, edgeType = "BRIDGE", edgeTypeName = "epbridge_no_pillar.lua", edges = {{{x[4]*xflip, d/2, 0}, {0, -d/2, 0}}, {{x[4]*xflip, 0, h/2}, {0, -d/2, h/2}}, }, snapNodes = {}, freeNodes = {},}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = "eproads/1_lane_oneway_ue.lua", }, edgeType = "BRIDGE", edgeTypeName = "epbridge_no_pillar.lua", edges = {{{x[4]*xflip, 0, h/2}, {0, -d/2, h/2}}, {{x[8]*xflip, -d/2, h}, {0, -d/2, 0}}, }, snapNodes = {}, freeNodes = {},}
                        result.models[#result.models + 1] = {id = "depot/eproads_pillar_thin_module.mdl", transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x[4]*xflip, 0, h/2, 1 },}
                    end
                    if params.eproads_ramp == 1 and params.eproads_twoside == 0 then
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edges = {{{x[1]*xflip, -d/2, 0}, {0, d, 0}}, {{x[1]*xflip, d/2, 0}, {0, d, 0}}, }, snapNodes = {}, freeNodes = {0, 1},}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[4], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_no_pillar.lua", edges = {{{x[5]*xflip, -d/2, h}, {0, d, 0}}, {{x[5]*xflip, d/2, h}, {0, d, 0}}, }, snapNodes = {}, freeNodes = {1},}
                    end
                else
                    result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edges = {{{x[1]*xflip, -d/2, 0}, {0, d, 0}}, {{x[1]*xflip, d/2, 0}, {0, d, 0}}, }, snapNodes = {}, freeNodes = {0, 1},}
                    result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[3], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_no_pillar.lua", edges = {{{x[5]*xflip, -d/2, h}, {0, d, 0}}, {{x[5]*xflip, d/2, h}, {0, d, 0}}, }, snapNodes = {}, freeNodes = {0, 1},}
                    result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edges = {{{x[3]*xflip, d/2, 0}, {0, -d, 0}}, {{x[3]*xflip, -d/2, 0}, {0, -d, 0}}, }, snapNodes = {}, freeNodes = {0, 1},}
                    result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[4], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_no_pillar.lua", edges = {{{x[7]*xflip, d/2, h}, {0, -d, 0}}, {{x[7]*xflip, -d/2, h}, {0, -d, 0}}, }, snapNodes = {}, freeNodes = {0, 1},}
                end
            end

            if params.eproads_end1pillar == 1 then
                result.models[#result.models + 1] = {id = pillarName, transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, -d/2-n, h, 1 },}
            end
            if params.eproads_end2pillar == 1 then
                result.models[#result.models + 1] = {id = pillarName, transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, d/2+n, h, 1 },}
            end
            if params.eproads_pillarcount == 1 then
                result.models[#result.models + 1] = {id = pillarName, transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, h, 1 },}
            elseif params.eproads_pillarcount == 2 then
                result.models[#result.models + 1] = {id = pillarName, transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, -2/3*(d/2+n), h, 1 },}
                result.models[#result.models + 1] = {id = pillarName, transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2/3*(d/2+n), h, 1 },}
            elseif params.eproads_pillarcount == 3 then
                result.models[#result.models + 1] = {id = pillarName, transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, -1/2*(d/2+n), h, 1 },}
                result.models[#result.models + 1] = {id = pillarName, transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, h, 1 },}
                result.models[#result.models + 1] = {id = pillarName, transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1/2*(d/2+n), h, 1 },}
            end

            if params.eproads_ramp == 0 then
                if xflip == 1 then
                    result.terrainAlignmentLists = { {type = "EQUAL", faces = {{{0, d/2, -0.1}, {side[1], d/2, -0.1}, {side[1], d/2+2*n+1, -0.1}, {0, d/2+2*n+1, -0.1}}}, slopeLow = 0.8, slopeHigh = 0.8, }, }
                else
                    result.terrainAlignmentLists = { {type = "EQUAL", faces = {{{0, d/2+2*n+1, -0.1}, {-side[1], d/2+2*n+1, -0.1}, {-side[1], d/2, -0.1}, {0, d/2, -0.1}}}, slopeLow = 0.8, slopeHigh = 0.8, }, }
                end
            elseif params.eproads_ramp == 1 then
                if xflip == 1 then
                    result.terrainAlignmentLists = { {type = "EQUAL", faces = {{{side[2], d/2, -0.1}, {0, d/2, -0.1}, {0, d/2+2*n+1, -0.1}, {side[2], d/2+2*n+1, -0.1}}}, slopeLow = 0.8, slopeHigh = 0.8, }, }
                else
                    result.terrainAlignmentLists = { {type = "EQUAL", faces = {{{-side[2], d/2+2*n+1, -0.1}, {0, d/2+2*n+1, -0.1}, {-side[1], d/2, -0.1}, {0, d/2, -0.1}}}, slopeLow = 0.8, slopeHigh = 0.8, }, }
                end
            else
                if xflip == 1 then
                    result.terrainAlignmentLists = { {type = "EQUAL", faces = {{{side[2], d/2, -0.1}, {side[1], d/2, -0.1}, {side[1], d/2+2*n+1, -0.1}, {side[2], d/2+2*n+1, -0.1}}}, slopeLow = 0.8, slopeHigh = 0.8, }, }
                else
                    result.terrainAlignmentLists = { {type = "EQUAL", faces = {{{-side[2], d/2+2*n+1, -0.1}, {-side[1], d/2+2*n+1, -0.1}, {-side[1], d/2, -0.1}, {-side[2], d/2, -0.1}}}, slopeLow = 0.8, slopeHigh = 0.8, }, }
                end
            end

            result.cost = -1
            return result
        end
    }
    end