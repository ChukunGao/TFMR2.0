function data()
    return {
        type = "STREET_CONSTRUCTION",
        description = {
            name = _("TFMR modules 2 to 1"),
            description = _(" "),
        },
        availability = {
            yearFrom = 1920,
            yearTo = 9999
        },
        skipCollision = true,
        params = {
            {key = "eproads_modulechoice", name = "Modules", values = {_("2 lane"), _("4 lane"), _("6 lane"), _("8 lane")}, },
            {key = "eproads_configure", name = "Module Configuration", values = {_("Right"), _("Left")}, },
            {key = "eproads_slope", name = "Slope", uiType = "SLIDER", values = {_("-20%"), _("-15%"), _("-10%"), _("5%"), _("0%"), _("5%"), _("10%"), _("15%"), _("20%")}, defaultIndex = 4, },
            {key = "eproads_length", name = "Length Scaling", uiType = "SLIDER", values = {_("1"), _("1.1"), _("1.2"), _("1.3"), _("1.4"), _("1.5"), _("1.6"), _("1.7"), _("1.8"), _("1.9"), _("2")}, },
            {key = "eproads_elevate", name = "Elevation", values = {_("Ground"), _("Elevated with Pillar"), _("Elevated without Pillar")}, },
            {key = "eproads_roadtype", name = "Road type", values = {_("City Road"), _("Highway"), _("Urban Expressway")}, },
            {key = "eproads_nodeonesnap", name = "Node 1 snapping", uiType = "CHECKBOX", values = {_("0"), _("1")}, },
            {key = "eproads_nodetwosnap", name = "Node 2 snapping", uiType = "CHECKBOX", values = {_("0"), _("1")}, },
            {key = "eproads_nodethreesnap", name = "Node 3 snapping", uiType = "CHECKBOX", values = {_("0"), _("1")}, },
        },
        updateFn = function(params)
            local result = { }
            local SN1, FN1, SN2, FN2, SN3, FN3, r1, r2, SL, roadListTopcr, roadListBottomcr, roadListTophw, roadListBottomhw, roadListTopue, roadListBottomue, moduleStringListcr, moduleStringListhw, xflip, pillarName, laneChoice, groundFaceName, roadName, moduleString, centreString, side, x, len, n
    
            result.edgeLists = { }
            result.models = { }
            result.groundFaces = { }
    
            if params.eproads_nodeonesnap == 0 then 
                SN1 = {{ }, { }, }
                FN1 = {{0}, {1}, }
            end
            if params.eproads_nodeonesnap == 1 then 
                SN1 = {{0}, {1}, }
                FN1 = {{ }, { }, }
            end
            if params.eproads_nodetwosnap == 0 then 
                SN2 = {{ }, { }, }
                FN2 = {{0}, {1}, }
            end
            if params.eproads_nodetwosnap == 1 then 
                SN2 = {{0}, {1}, }
                FN2 = {{ }, { }, }
            end
            if params.eproads_nodethreesnap == 0 then 
                SN3 = {{ }, { }, }
                FN3 = {{0}, {1}, }
            end
            if params.eproads_nodethreesnap == 1 then 
                SN3 = {{0}, {1}, }
                FN3 = {{ }, { }, }
            end
            
            r1 = {0.980, 0.989, 0.995, 0.999, 1.000, 0.999, 0.995, 0.989, 0.980}
            r2 = {-0.200, -0.150, -0.100, -0.050, -0.000, 0.050, 0.100, 0.150, 0.200}
            SL = params.eproads_slope + 1
            roadListTopcr = {"eproads/1_lane_oneway_cr.lua", "eproads/2_lane_oneway_cr.lua", "eproads/3_lane_oneway_cr.lua", "eproads/4_lane_oneway_cr.lua"}
            roadListBottomcr = {"eproads/2_lane_twoway_cr.lua", "eproads/4_lane_twoway_cr.lua", "eproads/6_lane_twoway_cr.lua", "eproads/8_lane_twoway_cr.lua"}
            roadListTophw = {"eproads/1_lane_oneway_hw.lua", "eproads/2_lane_oneway_hw.lua", "eproads/3_lane_oneway_hw.lua", "eproads/4_lane_oneway_hw.lua"}
            roadListBottomhw = {"eproads/2_lane_twoway_hw.lua", "eproads/4_lane_twoway_hw.lua", "eproads/6_lane_twoway_hw.lua", "eproads/8_lane_twoway_hw.lua"}
            roadListTopue = {"eproads/1_lane_oneway_ue.lua", "eproads/2_lane_oneway_ue.lua", "eproads/3_lane_oneway_ue.lua", "eproads/4_lane_oneway_ue.lua"}
            roadListBottomue = {"eproads/2_lane_twoway_ue.lua", "eproads/4_lane_twoway_ue.lua", "eproads/6_lane_twoway_ue.lua", "eproads/8_lane_twoway_ue.lua"}
            moduleStringListcr = {"depot/eproads_1_1.2_6.mdl", "depot/eproads_2_1.2_6.mdl", "depot/eproads_3_1.2_6.mdl", "depot/eproads_4_1.2_6.mdl"}
            moduleStringListhw = {"depot/eproads_1_0.5_6_hw.mdl", "depot/eproads_2_0.5_6_hw.mdl", "depot/eproads_3_0.5_6_hw.mdl", "depot/eproads_4_0.5_6_hw.mdl"}

            if params.eproads_configure == 0 then
                xflip = 1
            else
                xflip = -1
            end

            n = 3

            if params.eproads_modulechoice == 0 then
                pillarName = "depot/eproads_pillar_thick_module.mdl"
                laneChoice = 1
            elseif params.eproads_modulechoice == 1 then
                pillarName = "depot/eproads_pillar_thick_module.mdl"
                laneChoice = 2
            elseif params.eproads_modulechoice == 2 then
                pillarName = "depot/eproads_pillar_uewide_module.mdl"
                laneChoice = 3
            elseif params.eproads_modulechoice == 3 then
                pillarName = "depot/eproads_pillar_uewide_module.mdl"
                laneChoice = 4
            end

            groundFaceName = "headquarter_era_a_01.lua"
            if params.eproads_roadtype == 0 then 
                roadName = {roadListTopcr[laneChoice], roadListBottomcr[laneChoice]}
            elseif params.eproads_roadtype == 1 then 
                roadName = {roadListTophw[laneChoice], roadListBottomhw[laneChoice]}
            else
                roadName = {roadListTopue[laneChoice], roadListBottomue[laneChoice]}
            end

            if params.eproads_roadtype == 0 then
                moduleString = moduleStringListcr[laneChoice]
                centreString = "depot/centre_2.4_6.mdl"
                side = 0.8+3.6*laneChoice
                x = 1.2+1.8*laneChoice
            else
                moduleString = moduleStringListhw[laneChoice]
                centreString = "depot/centre_1.0_6.mdl"
                side = 0.1+3.6*laneChoice
                x = 0.5+1.8*laneChoice 
            end

            len = 1 + params.eproads_length * 0.1
            n = n*len

            if params.eproads_elevate == 0 then
                result.models[#result.models + 1] = {id = moduleString, transf = { 1, 0, 0, 0, 0, len, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, },}
                result.models[#result.models + 1] = {id = centreString, transf = { 1, 0, 0, 0, 0, len, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, },}
                result.models[#result.models + 1] = {id = moduleString, transf = { -1, 0, 0, 0, 0, len, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, },}
                result.groundFaces = {{
                    face = {{-side-1.2, -n-1}, {side+1.2, -n-1}, {side+1.2, n+1}, {-side-1.2, n+1}},
                    modes = {{type = "FILL", key = groundFaceName}}
                }}
                result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edges = {{{-x*xflip, n+2, 0}, {0, -2, 0}}, {{-x*xflip, n, 0}, {0, -2, 0}}, }, snapNodes = SN1[1], freeNodes = FN1[1],}
                result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edges = {{{x*xflip, n, 0}, {0, 2, 0}}, {{x*xflip, n+2, 0}, {0, 2, 0}}, }, snapNodes = SN2[2], freeNodes = FN2[2],}
                result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edges = {{{0, -n, 0}, {0, -2, 0}}, {{0, -n-2, 0}, {0, -2, 0}}, }, snapNodes = SN3[2], freeNodes = FN3[2],}    
                result.terrainAlignmentLists = { {type = "EQUAL", faces = {{{-side-1.2, -n-1, -0.1}, {side+1.2, -n-1, -0.1}, {side+1.2, n+1, -0.1}, {-side-1.2, n+1, -0.1}}}, slopeLow = 0.8, slopeHigh = 0.8, }, }
                if params.eproads_roadtype == 1 then
                    result.models[#result.models + 1] = {id = "depot/railing_hw_0.5_6_right.mdl", transf = { 1, 0, 0, 0, 0, len, 0, 0, 0, 0, 1, 0, side, 0, 0, 1, },}
                    result.models[#result.models + 1] = {id = "depot/railing_hw_0.5_6_right.mdl", transf = { -1, 0, 0, 0, 0, len, 0, 0, 0, 0, 1, 0, -side, 0, 0, 1, },}
                end
            end
            if params.eproads_elevate == 1 then
                result.models[#result.models + 1] = {id = pillarName, transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, },}
            end
            if params.eproads_elevate == 1 or params.eproads_elevate == 2 then 
                result.models[#result.models + 1] = {id = moduleString, transf = { 1, 0, 0, 0, 0, r1[SL]*len, r2[SL]*len, 0, 0, -r2[SL], r1[SL], 0, 0, 0, 0, 1 },}
                result.models[#result.models + 1] = {id = centreString, transf = { 1, 0, 0, 0, 0, r1[SL]*len, r2[SL]*len, 0, 0, -r2[SL], r1[SL], 0, 0, 0, 0, 1 },}
                result.models[#result.models + 1] = {id = moduleString, transf = { -1, 0, 0, 0, 0, r1[SL]*len, r2[SL]*len, 0, 0, -r2[SL], r1[SL], 0, 0, 0, 0, 1 },}
                if params.eproads_roadtype == 0 then
                    result.models[#result.models + 1] = {id = "depot/railing_elevated_1.2_6_right.mdl", transf = { 1, 0, 0, 0, 0, r1[SL]*len, r2[SL]*len, 0, 0, -r2[SL], r1[SL], 0, side, 0, 0, 1 },}
                    result.models[#result.models + 1] = {id = "depot/railing_elevated_1.2_6_right.mdl", transf = { -1, 0, 0, 0, 0, r1[SL]*len, r2[SL]*len, 0, 0, -r2[SL], r1[SL], 0, -side, 0, 0, 1 },}
                else
                    result.models[#result.models + 1] = {id = "depot/railing_elevated_0.5_6_right.mdl", transf = { 1, 0, 0, 0, 0, r1[SL]*len, r2[SL]*len, 0, 0, -r2[SL], r1[SL], 0, side, 0, 0, 1 },}
                    result.models[#result.models + 1] = {id = "depot/railing_elevated_0.5_6_right.mdl", transf = { -1, 0, 0, 0, 0, r1[SL]*len, r2[SL]*len, 0, 0, -r2[SL], r1[SL], 0, -side, 0, 0, 1 },}
                end
                result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_thin.lua", edges = {{{-x*xflip, (n+2)*r1[SL], (n+2)*r2[SL]}, {0, -2*r1[SL], -2*r2[SL]}}, {{-x*xflip, n*r1[SL], n*r2[SL]}, {0, -2*r1[SL], -2*r2[SL]}}, }, snapNodes = SN1[1], freeNodes = FN1[1],}
                result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_thin.lua", edges = {{{x*xflip, n*r1[SL], n*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, {{x*xflip, (n+2)*r1[SL], (n+2)*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, }, snapNodes = SN2[2], freeNodes = FN2[2],}
                result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_thin.lua", edges = {{{0, -n*r1[SL], -n*r2[SL]}, {0, -2*r1[SL], -2*r2[SL]}}, {{0, -n*r1[SL]-2*r1[SL], -n*r2[SL]-2*r2[SL]}, {0, -2*r1[SL], -2*r2[SL]}}, }, snapNodes = SN3[2] ,freeNodes = FN3[2],}
                result.terrainAlignmentLists = { {type = "EQUAL", faces = { } } }
            end

            result.cost = -1
            return result
        end
    }
    end