function data()
    return {
        type = "STREET_CONSTRUCTION",
        description = {
            name = _("TFMR modules expand"),
            description = _(" "),
        },
        availability = {
            yearFrom = 1920,
            yearTo = 9999
        },
        skipCollision = true,
        params = {
            {key = "eproads_modulechoice", name = "Modules", values = {_("1=2"), _("2=3"), _("3=4")}, },
            {key = "eproads_configure", name = "Module Configuration", values = {_("Right Expand"), _("Right Shrink"), _("Left Expand"), _("Left Shrink")}, },
            {key = "eproads_slope", name = "Slope", uiType = "SLIDER", values = {_("-20%"), _("-15%"), _("-10%"), _("5%"), _("0%"), _("5%"), _("10%"), _("15%"), _("20%")}, defaultIndex = 4, },
            {key = "eproads_length", name = "Length Scaling", uiType = "SLIDER", values = {_("1"), _("1.1"), _("1.2"), _("1.3"), _("1.4"), _("1.5"), _("1.6"), _("1.7"), _("1.8"), _("1.9"), _("2")}, },
            {key = "eproads_elevate", name = "Elevation", values = {_("Ground"), _("Elevated with Pillar"), _("Elevated without Pillar"), _("Underground")}, },
            {key = "eproads_hole", name = "Hole", values = {_("Yes"), _("No")}, },
            {key = "eproads_roadtype", name = "Road type", values = {_("City Road"), _("Highway"), _("Urban Expressway")}, },
            {key = "eproads_modulenumber", name = "Number of modules", values = {_("1"), _("2")}, },
            {key = "eproads_narrowgap", name = "Reduce road gap", uiType = "CHECKBOX", values = {_("0"), _("1")}, },
            {key = "eproads_uepillar", name = "Urban Expwy Pillar", uiType = "CHECKBOX", values = {_("0"), _("1")}, },
            {key = "eproads_nodeonesnap", name = "Node 1 snapping", uiType = "CHECKBOX", values = {_("0"), _("1")}, },
            {key = "eproads_nodetwosnap", name = "Node 2 snapping", uiType = "CHECKBOX", values = {_("0"), _("1")}, },
        },
        updateFn = function(params)
            local result = { }
            local SN1, FN1, SN2, FN2, r1, r2, SL, slopeLenRailing, slopeDisplaceRailing, slopeLenTunnel, slopeDisplaceTunnel, roadListcr, roadListhw, roadListue, moduleListcr, moduleListhw, xflip, yflip, node2Lane, x, groundFaceName, roadName, moduleList, sideShift, side, pillarName, len, n
    
            result.edgeLists = { }
            result.models = { }
            result.groundFaces = { }
            
            if params.eproads_nodeonesnap == 0 then 
                SN1 = {{ }, { }, }
                FN1 = {{0}, {1}, }
            elseif params.eproads_nodeonesnap == 1 then 
                SN1 = {{0}, {1}, }
                FN1 = {{ }, { }, }
            end
            if params.eproads_nodetwosnap == 0 then 
                SN2 = {{ }, { }, }
                FN2 = {{0}, {1}, }
            elseif params.eproads_nodetwosnap == 1 then 
                SN2 = {{0}, {1}, }
                FN2 = {{ }, { }, }
            end
            
            r1 = {0.980, 0.989, 0.995, 0.999, 1.000, 0.999, 0.995, 0.989, 0.980}
            r2 = {-0.200, -0.150, -0.100, -0.050, -0.000, 0.050, 0.100, 0.150, 0.200}

            SL = params.eproads_slope + 1
            roadListcr = {"eproads/1_lane_oneway_cr.lua", "eproads/2_lane_oneway_cr.lua", "eproads/3_lane_oneway_cr.lua", "eproads/4_lane_oneway_cr.lua"}
            roadListhw = {"eproads/1_lane_oneway_hw.lua", "eproads/2_lane_oneway_hw.lua", "eproads/3_lane_oneway_hw.lua", "eproads/4_lane_oneway_hw.lua"}
            roadListue = {"eproads/1_lane_oneway_ue.lua", "eproads/2_lane_oneway_ue.lua", "eproads/3_lane_oneway_ue.lua", "eproads/4_lane_oneway_ue.lua"}
            moduleListcr = {"depot/eproads_1_0_12.mdl", "depot/eproads_2_0_12.mdl", "depot/eproads_3_0_12.mdl"}
            moduleListhw = {"depot/eproads_1_0_12_hw.mdl", "depot/eproads_2_0_12_hw.mdl", "depot/eproads_3_0_12_hw.mdl"}

            if params.eproads_configure == 0 then
                xflip = 1
                yflip = 1
            elseif params.eproads_configure == 1 then
                xflip = 1
                yflip = -1
            elseif params.eproads_configure == 2 then
                xflip = -1
                yflip = 1
            elseif params.eproads_configure == 3 then
                xflip = -1
                yflip = -1
            end

            n = 6
    
            if params.eproads_modulechoice == 0 then
                node2Lane = 1
            elseif params.eproads_modulechoice == 1 then
                node2Lane = 2
            elseif params.eproads_modulechoice == 2 then
                node2Lane = 3
            end

            x = -1.8*(node2Lane-1)
            groundFaceName = "headquarter_era_a_01.lua"
            if params.eproads_roadtype == 0 then 
                roadName = {roadListcr[node2Lane+1], roadListcr[node2Lane]}
                moduleList = {moduleListcr[node2Lane], "depot/centre_expand.mdl"}
                sideShift = 0.8
            elseif params.eproads_roadtype == 1 then 
                roadName = {roadListhw[node2Lane+1], roadListhw[node2Lane]}
                moduleList = {moduleListhw[node2Lane], "depot/centre_expand_hw.mdl"}
                sideShift = 0.1
            else
                roadName = {roadListue[node2Lane+1], roadListue[node2Lane]}
                moduleList = {moduleListhw[node2Lane], "depot/centre_expand_hw.mdl"}
                sideShift = 0.1
            end
            side = -sideShift-3.6*node2Lane
            if params.eproads_uepillar == 0 then
                if node2Lane <= 2 then
                    pillarName = "depot/eproads_pillar_thin_module.mdl"
                else
                    pillarName = "depot/eproads_pillar_thick_module.mdl"
                end
            else
                if node2Lane <= 2 then
                    pillarName = "depot/eproads_pillar_thick_module.mdl"
                else
                    pillarName = "depot/eproads_pillar_uewide_module.mdl"
                end
            end

            len = 1 + params.eproads_length * 0.1
            yflip = yflip*len
            n = n*len

            if params.eproads_modulenumber == 0 then 
                if params.eproads_elevate == 0 then
                    result.models[#result.models + 1] = {id = moduleList[1], transf = { xflip, 0, 0, 0, 0, yflip, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, },}
                    result.models[#result.models + 1] = {id = moduleList[2], transf = { xflip, 0, 0, 0, 0, yflip, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, },}
                    result.groundFaces = {{
                        face = {{side*xflip, -(n+1)}, {4.4*xflip, -(n+1)}, {4.4*xflip, (n+1)}, {side*xflip, (n+1)}},
                        modes = {{type = "FILL", key = groundFaceName}}
                    }}
                    if params.eproads_configure == 0 or params.eproads_configure == 2 then
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edges = {{{x*xflip, n, 0}, {0, 2, 0}}, {{x*xflip, n+2, 0}, {0, 2, 0}}, }, snapNodes = SN1[2], freeNodes = FN1[2],}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edges = {{{(x-1.8)*xflip, -n-2, 0}, {0, 2, 0}}, {{(x-1.8)*xflip, -n, 0}, {0, 2, 0}}, }, snapNodes = SN2[1], freeNodes = FN2[1],}
                    else
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edges = {{{x*xflip, -n-2, 0}, {0, 2, 0}}, {{x*xflip, -n, 0}, {0, 2, 0}}, }, snapNodes = SN1[1], freeNodes = FN1[1],}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edges = {{{(x-1.8)*xflip, n, 0}, {0, 2, 0}}, {{(x-1.8)*xflip, n+2, 0}, {0, 2, 0}}, }, snapNodes = SN2[2], freeNodes = FN2[2],}
                    end
                    if xflip == 1 then
                        result.terrainAlignmentLists = { {type = "EQUAL", faces = {{{side*xflip, -(n+1), -0.1}, {4.4*xflip, -(n+1), -0.1}, {4.4*xflip, (n+1), -0.1}, {side*xflip, (n+1), -0.1}}}, slopeLow = 0.8, slopeHigh = 0.8, }, }
                    else
                        result.terrainAlignmentLists = { {type = "EQUAL", faces = {{{side*xflip, (n+1), -0.1}, {4.4*xflip, (n+1), -0.1}, {4.4*xflip, -(n+1), -0.1}, {side*xflip, -(n+1), -0.1}}}, slopeLow = 0.8, slopeHigh = 0.8, }, }
                    end
                    if params.eproads_roadtype == 1 then
                        result.models[#result.models + 1] = {id = "depot/railing_hw_0_12_left.mdl", transf = { xflip, 0, 0, 0, 0, yflip, 0, 0, 0, 0, 1, 0, side*xflip, 0, 0, 1, },}
                        result.models[#result.models + 1] = {id = "depot/railing_hw_3.6_12_right.mdl", transf = { xflip, 0, 0, 0, 0, yflip, 0, 0, 0, 0, 1, 0, sideShift*xflip, 0, 0, 1, },}
                    end
                end
                if params.eproads_elevate == 1 then
                    if params.eproads_uepillar == 0 then
                        result.models[#result.models + 1] = {id = pillarName, transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, (x-0.9)*xflip, 0, 0, 1, },}
                    else
                        result.models[#result.models + 1] = {id = pillarName, transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -4.1*xflip, 0, 0, 1, },}
                    end
                end
                if params.eproads_elevate == 1 or params.eproads_elevate == 2 then
                    result.models[#result.models + 1] = {id = moduleList[1], transf = { xflip, 0, 0, 0, 0, r1[SL]*yflip, r2[SL]*yflip, 0, 0, -r2[SL]*xflip, r1[SL], 0, 0, 0, 0, 1 },}
                    result.models[#result.models + 1] = {id = moduleList[2], transf = { xflip, 0, 0, 0, 0, r1[SL]*yflip, r2[SL]*yflip, 0, 0, -r2[SL]*xflip, r1[SL], 0, 0, 0, 0, 1 },}
                    result.models[#result.models + 1] = {id = "depot/railing_elevated_0_12_left.mdl", transf = { xflip, 0, 0, 0, 0, r1[SL]*yflip, r2[SL]*yflip, 0, 0, -r2[SL]*xflip, r1[SL], 0, side*xflip, 0, 0, 1 },}
                    result.models[#result.models + 1] = {id = "depot/railing_elevated_3.6_12_right.mdl", transf = { xflip, 0, 0, 0, 0, r1[SL]*yflip, r2[SL]*yflip, 0, 0, -r2[SL]*xflip, r1[SL], 0, sideShift*xflip, 0, 0, 1 },}
                    if params.eproads_configure == 0 or params.eproads_configure == 2 then
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_thin.lua", edges = {{{x*xflip, n*r1[SL], n*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, {{x*xflip, (n+2)*r1[SL], (n+2)*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, }, snapNodes = SN1[2], freeNodes = FN1[2],}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_thin.lua", edges = {{{(x-1.8)*xflip, -(n+2)*r1[SL], -(n+2)*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, {{(x-1.8)*xflip, -n*r1[SL], -n*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, }, snapNodes = SN2[1], freeNodes = FN2[1],}
                    else
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_thin.lua", edges = {{{x*xflip, -(n+2)*r1[SL], -(n+2)*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, {{x*xflip, -n*r1[SL], -n*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, }, snapNodes = SN1[1], freeNodes = FN1[1],}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_thin.lua", edges = {{{(x-1.8)*xflip, n*r1[SL], n*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, {{(x-1.8)*xflip, (n+2)*r1[SL], (n+2)*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, }, snapNodes = SN2[2], freeNodes = FN2[2],}
                    end
                    result.terrainAlignmentLists = { {type = "EQUAL", faces = { } } }
                end
                if params.eproads_elevate == 3 then
                    result.models[#result.models + 1] = {id = moduleList[1], transf = { xflip, 0, 0, 0, 0, r1[SL]*yflip, r2[SL]*yflip, 0, 0, -r2[SL]*xflip, r1[SL], 0, 0, 0, 0, 1 },}
                    result.models[#result.models + 1] = {id = moduleList[2], transf = { xflip, 0, 0, 0, 0, r1[SL]*yflip, r2[SL]*yflip, 0, 0, -r2[SL]*xflip, r1[SL], 0, 0, 0, 0, 1 },}
                    result.models[#result.models + 1] = {id = "depot/eptunnel_module_side.mdl", transf = { xflip, 0, 0, 0, 0, r1[SL]*yflip*15, r2[SL]*yflip*15, 0, 0, -r2[SL]*xflip, r1[SL], 0, (side-0.01)*xflip, 0, 0, 1 },}
                    result.models[#result.models + 1] = {id = "depot/eptunnel_module_side.mdl", transf = { -xflip*0.958, -0.287, 0, 0, r1[SL]*yflip*15*0.287, r1[SL]*yflip*15*0.958, r2[SL]*yflip*15, 0, -r2[SL]*xflip*0.287, -r2[SL]*xflip, r1[SL], 0, (sideShift+1.8)*xflip, 0, 0, 1 },}
                    if params.eproads_configure == 0 or params.eproads_configure == 2 then
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edgeType = "TUNNEL", edgeTypeName = "eptunnel.lua", edges = {{{x*xflip, n*r1[SL], n*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, {{x*xflip, (n+2)*r1[SL], (n+2)*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, }, snapNodes = SN1[2], freeNodes = FN1[2],}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edgeType = "TUNNEL", edgeTypeName = "eptunnel.lua", edges = {{{(x-1.8)*xflip, -(n+2)*r1[SL], -(n+2)*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, {{(x-1.8)*xflip, -n*r1[SL], -n*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, }, snapNodes = SN2[1], freeNodes = FN2[1],}
                    else
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edgeType = "TUNNEL", edgeTypeName = "eptunnel.lua", edges = {{{x*xflip, -(n+2)*r1[SL], -(n+2)*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, {{x*xflip, -n*r1[SL], -n*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, }, snapNodes = SN1[1], freeNodes = FN1[1],}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edgeType = "TUNNEL", edgeTypeName = "eptunnel.lua", edges = {{{(x-1.8)*xflip, n*r1[SL], n*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, {{(x-1.8)*xflip, (n+2)*r1[SL], (n+2)*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, }, snapNodes = SN2[2], freeNodes = FN2[2],}
                    end
                    result.terrainAlignmentLists = { {type = "EQUAL", faces = { } } }
                    if params.eproads_hole == 0 then 
                        result.groundFaces = {{
                            face = {{(side+20)*xflip, -(n+30)}, {(4.4-20)*xflip, -(n+30)}, {(4.4-20)*xflip, (n+30)}, {(side+20)*xflip, (n+30)}},
                            modes = {{type = "FILL", key = "hole.lua"}}
                        }}
                    else
                        result.groundFaces = {{
                            face = {{1, 0}, {0, 0}, {0, 1}, {1, 1}},
                            modes = {{type = "FILL", key = groundFaceName}}
                        }}
                    end
                end
            else
                if params.eproads_narrowgap == 1 and params.eproads_roadtype ~= 0 then
                    xdisplace = (0.5+3.6*node2Lane)*xflip
                else
                    xdisplace = (1.2+3.6*node2Lane)*xflip
                end
                if params.eproads_elevate == 0 then
                    result.models[#result.models + 1] = {id = moduleList[1], transf = { xflip, 0, 0, 0, 0, yflip, 0, 0, 0, 0, 1, 0, xdisplace, 0, 0, 1, },}
                    result.models[#result.models + 1] = {id = moduleList[2], transf = { xflip, 0, 0, 0, 0, yflip, 0, 0, 0, 0, 1, 0, xdisplace, 0, 0, 1, },}
                    result.models[#result.models + 1] = {id = moduleList[1], transf = { -xflip, 0, 0, 0, 0, yflip, 0, 0, 0, 0, 1, 0, -xdisplace, 0, 0, 1, },}
                    result.models[#result.models + 1] = {id = moduleList[2], transf = { -xflip, 0, 0, 0, 0, yflip, 0, 0, 0, 0, 1, 0, -xdisplace, 0, 0, 1, },}
                    result.groundFaces = {{
                        face = {{3.6+sideShift+math.abs(xdisplace), -(n+1)}, {-3.6-sideShift-math.abs(xdisplace), -(n+1)}, {-3.6-sideShift-math.abs(xdisplace), (n+1)}, {3.6+sideShift+math.abs(xdisplace), (n+1)}},
                        modes = {{type = "FILL", key = groundFaceName}}
                    }}
                    if params.eproads_configure == 0 or params.eproads_configure == 2 then
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edges = {{{x*xflip+xdisplace, n, 0}, {0, 2, 0}}, {{x*xflip+xdisplace, n+2, 0}, {0, 2, 0}}, }, snapNodes = SN1[2], freeNodes = FN1[2],}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edges = {{{(x-1.8)*xflip+xdisplace, -n-2, 0}, {0, 2, 0}}, {{(x-1.8)*xflip+xdisplace, -n, 0}, {0, 2, 0}}, }, snapNodes = SN2[1], freeNodes = FN2[1],}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edges = {{{-x*xflip-xdisplace, n+2, 0}, {0, -2, 0}}, {{-x*xflip-xdisplace, n, 0}, {0, -2, 0}}, }, snapNodes = SN1[1], freeNodes = FN1[1],}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edges = {{{-(x-1.8)*xflip-xdisplace, -n, 0}, {0, -2, 0}}, {{-(x-1.8)*xflip-xdisplace, -n-2, 0}, {0, -2, 0}}, }, snapNodes = SN2[2], freeNodes = FN2[2],}
                    else
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edges = {{{x*xflip+xdisplace, -n-2, 0}, {0, 2, 0}}, {{x*xflip+xdisplace, -n, 0}, {0, 2, 0}}, }, snapNodes = SN1[1], freeNodes = FN1[1],}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edges = {{{(x-1.8)*xflip+xdisplace, n, 0}, {0, 2, 0}}, {{(x-1.8)*xflip+xdisplace, n+2, 0}, {0, 2, 0}}, }, snapNodes = SN2[2], freeNodes = FN2[2],}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edges = {{{-x*xflip-xdisplace, -n, 0}, {0, -2, 0}}, {{-x*xflip-xdisplace, -n-2, 0}, {0, -2, 0}}, }, snapNodes = SN1[2], freeNodes = FN1[2],}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edges = {{{-(x-1.8)*xflip-xdisplace, n+2, 0}, {0, -2, 0}}, {{-(x-1.8)*xflip-xdisplace, n, 0}, {0, -2, 0}}, }, snapNodes = SN2[1], freeNodes = FN2[1],}
                    end
                    result.terrainAlignmentLists = { {type = "EQUAL", faces = {{{-3.6-sideShift-math.abs(xdisplace), -(n+1), -0.1}, {3.6+sideShift+math.abs(xdisplace), -(n+1), -0.1}, {3.6+sideShift+math.abs(xdisplace), (n+1), -0.1}, {-3.6-sideShift-math.abs(xdisplace), (n+1), -0.1}}}, slopeLow = 0.8, slopeHigh = 0.8, }, }
                    if params.eproads_roadtype == 1 then
                        result.models[#result.models + 1] = {id = "depot/railing_hw_0_12_left.mdl", transf = { xflip, 0, 0, 0, 0, yflip, 0, 0, 0, 0, 1, 0, side*xflip+xdisplace, 0, 0, 1, },}
                        result.models[#result.models + 1] = {id = "depot/railing_hw_3.6_12_right.mdl", transf = { xflip, 0, 0, 0, 0, yflip, 0, 0, 0, 0, 1, 0, sideShift*xflip+xdisplace, 0, 0, 1, },}
                        result.models[#result.models + 1] = {id = "depot/railing_hw_0_12_left.mdl", transf = { -xflip, 0, 0, 0, 0, yflip, 0, 0, 0, 0, 1, 0, -side*xflip-xdisplace, 0, 0, 1, },}
                        result.models[#result.models + 1] = {id = "depot/railing_hw_3.6_12_right.mdl", transf = { -xflip, 0, 0, 0, 0, yflip, 0, 0, 0, 0, 1, 0, -sideShift*xflip-xdisplace, 0, 0, 1, },}
                    end
                end
                if params.eproads_elevate == 1 then
                    if params.eproads_uepillar == 0 then
                        result.models[#result.models + 1] = {id = pillarName, transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, (x-0.9)*xflip+xdisplace, 0, 0, 1, },}
                        result.models[#result.models + 1] = {id = pillarName, transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -(x-0.9)*xflip-xdisplace, 0, 0, 1, },}
                    else
                        result.models[#result.models + 1] = {id = pillarName, transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, },}
                    end
                end
                if params.eproads_elevate == 1 or params.eproads_elevate == 2 then
                    result.models[#result.models + 1] = {id = moduleList[1], transf = { xflip, 0, 0, 0, 0, r1[SL]*yflip, r2[SL]*yflip, 0, 0, -r2[SL]*xflip, r1[SL], 0, xdisplace, 0, 0, 1 },}
                    result.models[#result.models + 1] = {id = moduleList[2], transf = { xflip, 0, 0, 0, 0, r1[SL]*yflip, r2[SL]*yflip, 0, 0, -r2[SL]*xflip, r1[SL], 0, xdisplace, 0, 0, 1 },}
                    result.models[#result.models + 1] = {id = moduleList[1], transf = { -xflip, 0, 0, 0, 0, r1[SL]*yflip, r2[SL]*yflip, 0, 0, -r2[SL]*xflip, r1[SL], 0, -xdisplace, 0, 0, 1 },}
                    result.models[#result.models + 1] = {id = moduleList[2], transf = { -xflip, 0, 0, 0, 0, r1[SL]*yflip, r2[SL]*yflip, 0, 0, -r2[SL]*xflip, r1[SL], 0, -xdisplace, 0, 0, 1 },}
                    result.models[#result.models + 1] = {id = "depot/railing_elevated_0_12_left.mdl", transf = { xflip, 0, 0, 0, 0, r1[SL]*yflip, r2[SL]*yflip, 0, 0, -r2[SL]*xflip, r1[SL], 0, side*xflip+xdisplace, 0, 0, 1 },}
                    result.models[#result.models + 1] = {id = "depot/railing_elevated_3.6_12_right.mdl", transf = { xflip, 0, 0, 0, 0, r1[SL]*yflip, r2[SL]*yflip, 0, 0, -r2[SL]*xflip, r1[SL], 0, sideShift*xflip+xdisplace, 0, 0, 1 },}
                    result.models[#result.models + 1] = {id = "depot/railing_elevated_0_12_left.mdl", transf = { -xflip, 0, 0, 0, 0, r1[SL]*yflip, r2[SL]*yflip, 0, 0, -r2[SL]*xflip, r1[SL], 0, -side*xflip-xdisplace, 0, 0, 1 },}
                    result.models[#result.models + 1] = {id = "depot/railing_elevated_3.6_12_right.mdl", transf = { -xflip, 0, 0, 0, 0, r1[SL]*yflip, r2[SL]*yflip, 0, 0, -r2[SL]*xflip, r1[SL], 0, -sideShift*xflip-xdisplace, 0, 0, 1 },}
                    if params.eproads_configure == 0 or params.eproads_configure == 2 then
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_thin.lua", edges = {{{x*xflip+xdisplace, n*r1[SL], n*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, {{x*xflip+xdisplace, (n+2)*r1[SL], (n+2)*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, }, snapNodes = SN1[2], freeNodes = FN1[2],}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_thin.lua", edges = {{{(x-1.8)*xflip+xdisplace, -(n+2)*r1[SL], -(n+2)*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, {{(x-1.8)*xflip+xdisplace, -n*r1[SL], -n*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, }, snapNodes = SN2[1], freeNodes = FN2[1],}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_thin.lua", edges = {{{-x*xflip-xdisplace, (n+2)*r1[SL], (n+2)*r2[SL]}, {0, -2*r1[SL], -2*r2[SL]}}, {{-x*xflip-xdisplace, n*r1[SL], n*r2[SL]}, {0, -2*r1[SL], -2*r2[SL]}}, }, snapNodes = SN1[1], freeNodes = FN1[1],}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_thin.lua", edges = {{{-(x-1.8)*xflip-xdisplace, -n*r1[SL], -n*r2[SL]}, {0, -2*r1[SL], -2*r2[SL]}}, {{-(x-1.8)*xflip-xdisplace, -(n+2)*r1[SL], -(n+2)*r2[SL]}, {0, -2*r1[SL], -2*r2[SL]}}, }, snapNodes = SN2[2], freeNodes = FN2[2],}
                    else
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_thin.lua", edges = {{{x*xflip+xdisplace, -(n+2)*r1[SL], -(n+2)*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, {{x*xflip+xdisplace, -n*r1[SL], -n*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, }, snapNodes = SN1[2], freeNodes = FN1[2],}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_thin.lua", edges = {{{(x-1.8)*xflip+xdisplace, n*r1[SL], n*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, {{(x-1.8)*xflip+xdisplace, (n+2)*r1[SL], (n+2)*r2[SL]}, {0, 2*r1[SL], 2*r2[SL]}}, }, snapNodes = SN2[1], freeNodes = FN2[1],}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[1], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_thin.lua", edges = {{{-x*xflip-xdisplace, -n*r1[SL], -n*r2[SL]}, {0, -2*r1[SL], -2*r2[SL]}}, {{-x*xflip-xdisplace, -(n+2)*r1[SL], -(n+2)*r2[SL]}, {0, -2*r1[SL], -2*r2[SL]}}, }, snapNodes = SN1[1], freeNodes = FN1[1],}
                        result.edgeLists[#result.edgeLists + 1] = {type = "STREET", params = {type = roadName[2], }, edgeType = "BRIDGE", edgeTypeName = "epbridge_thin.lua", edges = {{{-(x-1.8)*xflip-xdisplace, (n+2)*r1[SL], (n+2)*r2[SL]}, {0, -2*r1[SL], -2*r2[SL]}}, {{-(x-1.8)*xflip-xdisplace, n*r1[SL], n*r2[SL]}, {0, -2*r1[SL], -2*r2[SL]}}, }, snapNodes = SN2[2], freeNodes = FN2[2],}
                    end
                    result.terrainAlignmentLists = { {type = "EQUAL", faces = { } } }
                end
            end

            result.cost = -1
            return result
        end
    }
    end